lasso.pred=predict(lasso.mod ,s=bestlam ,newx=x.test)
mean((lasso.pred -y.test)^2)
sd((lasso.pred -y.test)^2)/sqrt(length((lasso.pred -y.test)^2))
lasso.coef=predict(cv.out ,type ="coefficients",s=bestlam )[1:10 ,]
lasso.coef
library(lars)
library(GGally)
library(ggplot2)
library (gridExtra)
library(corrgram)
library(corrplot)
library(leaps)
library(glmnet)
data(diabetes)
data.all <- data.frame(cbind(diabetes$x, y = diabetes$y))
dim(data.all)
names(data.all)
summary(data.all)
str(data.all)
n <- dim(data.all)[1] # sample size = 442
set.seed(1306) # set random number generator seed to enable
test <- sample(n, round(n/4)) # randomly sample 25% test
data.train <- data.all[-test,]
data.test <- data.all[test,]
x <- model.matrix(y ~ ., data = data.all)[,-1] # define predictor matrix
##Create matrix with only response variable
y <- data.all$y # define response variable
# Create training matrix
x.train <- x[-test,] # define training predictor matrix
x.test <- x[test,] # define test predictor matrix
##Create individual y matrix
y.train <- y[-test] # define training response variable
y.test <- y[test] # define test response variable
#Store number of obversations for each training and test set
n.train <- dim(data.train)[1] # training sample size = 332
n.test <- dim(data.test)[1] # test sample size = 110
model.lm <- lm(y~.,data = data.train)
lm.summary <- summary(model.lm)
lm.summary
lm.pred <- predict(model.lm,data.test)
mean((lm.pred -data.test$y)^2)
sd((lm.pred -data.test$y)^2)/sqrt(length((lm.pred -data.test$y)^2))
predict.regsubsets =function (object ,newdata ,id ,...){
form=as.formula(object$call [[2]])
mat=model.matrix(form ,newdata )
coefi =coef(object ,id=id)
xvars =names(coefi )
mat[,xvars ]%*% coefi
}
regfit.full=regsubsets(y~.,data.train,nvmax =10)
reg.summary <- summary(regfit.full)
which.min(reg.summary$bic)
#Explore graph
plot(reg.summary$bic ,xlab=" Number of Variables ",ylab="BIC",
type="l")
points(6, reg.summary$bic[6], col =" red",cex =2, pch =20)
#Get variables and coefficients
coef(regfit.full ,6)
regfit.pred <- predict.regsubsets(regfit.full,data.test,id=5)
mean((regfit.pred -data.test$y)^2)
sd((regfit.pred -data.test$y)^2)/sqrt(length((regfit.pred -data.test$y)^2))
k=10
set.seed(1306)
folds <- sample(1:k, nrow(data.train), replace = TRUE)
cv.errors <- matrix(NA ,k,10, dimnames =list(NULL , paste (1:10) ))
for(j in 1:k){
best.fit=regsubsets(y~.,data=data.train[folds !=j,],
nvmax =10)
for(i in 1:10) {
pred=predict(best.fit ,data.train[folds ==j,], id=i)
cv.errors[j,i]=mean( (data.train$y[folds ==j]-pred)^2)
}
}
mean.cv.errors =apply(cv.errors ,2, mean)
min(mean.cv.errors)
# [1] 2978.907
par(mfrow =c(1,1))
plot(mean.cv.errors ,type='b')
reg.best=regsubsets (y~.,data=data.train , nvmax =10)
coef(reg.best ,6)
#Coefficients:
regbest.pred <- predict.regsubsets(reg.best,data.test,id=6)
mean((regbest.pred -data.test$y)^2)
sd((regbest.pred -data.test$y)^2)/sqrt(length((regbest.pred -data.test$y)^2))
grid =10^seq(10,-2, length =100)
ridge.mod =glmnet(x.train,y.train,alpha =0, lambda =grid)
set.seed(1306)
cv.out <- cv.glmnet(x.train,y.train,alpha =0)
bestlam <- cv.out$lambda.1se
bestlam
ridge.pred=predict(ridge.mod ,s=bestlam ,newx=x.test)
mean((ridge.pred -y.test)^2)
sd((ridge.pred -y.test)^2)/sqrt(length((ridge.pred -y.test)^2))
ridge.coef
ridge.coef=predict(cv.out ,type ="coefficients",s=bestlam )[1:10 ,]
ridge.coef
grid =10^seq(10,-2, length =100)
lasso.mod =glmnet(x.train,y.train,alpha =1, lambda =grid)
plot(lasso.mod, xvar="lambda", label=T)
set.seed(1306)
cv.out <- cv.glmnet(x.train,y.train,alpha =1)
bestlam <- cv.out$lambda.1se
bestlam
# [1] 4.791278
#Mean Prediction Error:
lasso.pred=predict(lasso.mod ,s=bestlam ,newx=x.test)
mean((lasso.pred -y.test)^2)
# [1] 2920.08
#SE of MSE
sd((lasso.pred -y.test)^2)/sqrt(length((lasso.pred -y.test)^2))
lasso.coef=predict(cv.out ,type ="coefficients",s=bestlam )[1:10 ,]
lasso.coef
save.image("~/Documents/Work_Computer/Grad_School/PREDICT_422/Module4/IndividualProject1/Project1.RData")
p1<-ggplot(aes(x=age),
data = data.all)+
geom_histogram(color =I('black'),fill = I('#099009'))+
ggtitle('Age')
p2<-ggplot(aes(x=sex),
data =  data.all)+
geom_histogram(color =I('black'),fill = I('#099009'))+
ggtitle('Gender')
p3<-ggplot(aes(x=bmi),
data =  data.all ) +
geom_histogram(color =I('black'),fill = I('#099009'))+
ggtitle('BMI')
p4<-ggplot(aes(x=map),data=data.all)+
geom_histogram(color =I('black'),fill = I('#099009'))+
ggtitle('Avg Blood Pressure')
p5<-ggplot(aes(x=tc),
data =  data.all)+
geom_histogram(color =I('black'),fill = I('#099009'))+
ggtitle('tc')
p6<-ggplot(aes(x=ldl),
data =  data.all)+
geom_histogram(color =I('black'),fill = I('#099009'))+
ggtitle('LDL')
p7<-ggplot(aes(x=hdl),
data =  data.all ) +
geom_histogram(color =I('black'),fill = I('#099009'))+
ggtitle('HDL')
p8<-ggplot(aes(x=tch),data=data.all)+
geom_histogram(color =I('black'),fill = I('#099009'))+
ggtitle('TCH')
p9<-ggplot(aes(x=ltg),
data =  data.all)+
geom_histogram(color =I('black'),fill = I('#099009'))+
ggtitle('LTG')
p10<-ggplot(aes(x=glu),
data =  data.all)+
geom_histogram(color =I('black'),fill = I('#099009'))+
ggtitle('Glucose')
p11<-ggplot(aes(x=y),
data =  data.all ) +
geom_histogram(color =I('black'),fill = I('#099009'))+
ggtitle('Quantitative Progression of Disease')
grid.arrange(p1,p2,p3,p3,p4,p5,p6,p7,p8,p9,p10,p11,ncol=3)
#There is no missing data, all variables are numeric, there are 442 data points and 11 variables
p11<-ggplot(aes(x=y),           data =  data.all ) +  geom_histogram(color =I('black'),fill = I('#099009'))+  ggtitle('Disease Progression')
p11<-ggplot(aes(x=y),
data =  data.all ) +
geom_histogram(color =I('black'),fill = I('#099009'))+
ggtitle('Disease Progression')
grid.arrange(p1,p2,p3,p3,p4,p5,p6,p7,p8,p9,p10,p11,ncol=3)
dim(data.all)
grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,ncol=3)
coef(regfit.full ,6)
grid =10^seq(10,-2, length =100)
ridge.mod =glmnet(x.train,y.train,alpha =0, lambda =grid)
plot(ridge.mod, xvar="lambda", label=T)
set.seed(1306)
cv.out <- cv.glmnet(x.train,y.train,alpha =0)
bestlam <- cv.out$lambda.1se
bestlam
plot(cv.out)
grid =10^seq(10,-2, length =100)
lasso.mod =glmnet(x.train,y.train,alpha =1, lambda =grid)
plot(lasso.mod, xvar="lambda", label=T)
set.seed(1306)
cv.out <- cv.glmnet(x.train,y.train,alpha =1)
bestlam <- cv.out$lambda.1se
bestlam
plot(cv.out)
log(bestlam)
plot(lasso.mod, xvar="lambda", label=T)
grid =10^seq(10,-2, length =100)
ridge.mod =glmnet(x.train,y.train,alpha =0, lambda =grid)
plot(ridge.mod, xvar="lambda", label=T)
set.seed(1306)
cv.out <- cv.glmnet(x.train,y.train,alpha =0)
bestlam <- cv.out$lambda.1se
bestlam
log(bestlam)
grid =10^seq(10,-2, length =100)
ridge.mod =glmnet(x.train,y.train,alpha =0, lambda =grid)
plot(ridge.mod, xvar="lambda", label=T)
set.seed(1306)
cv.out <- cv.glmnet(x.train,y.train,alpha =0)
plot(cv.out)
ridge.coef=predict(cv.out ,type ="coefficients",s=bestlam )[1:10 ,]
ridge.coef
ridge.coef=predict(cv.out ,type ="coefficients",s=bestlam )[1:11,]
ridge.coef
lasso.coef=predict(cv.out ,type ="coefficients",s=bestlam )[1:11 ,]
lasso.coef
grid =10^seq(10,-2, length =100)
lasso.mod =glmnet(x.train,y.train,alpha =1, lambda =grid)
plot(lasso.mod, xvar="lambda", label=T)
set.seed(1306)
cv.out <- cv.glmnet(x.train,y.train,alpha =1)
bestlam <- cv.out$lambda.1se
bestlam
# [1] 4.791278
#Mean Prediction Error:
lasso.pred=predict(lasso.mod ,s=bestlam ,newx=x.test)
mean((lasso.pred -y.test)^2)
# [1] 2920.08
#SE of MSE
sd((lasso.pred -y.test)^2)/sqrt(length((lasso.pred -y.test)^2))
# [1] 346.228
##Coefficients:
lasso.coef=predict(cv.out ,type ="coefficients",s=bestlam )[1:11 ,]
lasso.coef
regfit.pred <- predict.regsubsets(regfit.full,data.test,id=6)
mean((regfit.pred -data.test$y)^2)
sd((regfit.pred -data.test$y)^2)/sqrt(length((regfit.pred -data.test$y)^2))
save.image("~/Documents/Work_Computer/Grad_School/PREDICT_422/Module4/IndividualProject1/Project1.RData")
setwd("/Users/asheets/Documents/Work_Computer/Grad_School/PREDICT_422/GroupProjectEC")
data <- read.csv(file='Speed_Dating_Data.csv',header=TRUE,sep=",",stringsAsFactors=FALSE)
summary(data)
table(complete.cases(data))
check <- matrix(nrow = 195, ncol = 21)
rownames(check) <- colnames(data)
colnames(check) <- seq(1,21)
for (j in 1:21) {
tmp <- data[which(data$wave == j),]
for (i in 1:length(rownames(check))) {
na = sum(is.na(tmp[,c(rownames(check)[i])]))
total = length((tmp[,c(rownames(check)[i])]))
check[i,j] <- round(na / total,digits = 3)
}
}
View(check)
View(check)
summary(data)
for (i in 1:length(rownames(check))) {
na = sum(is.na(tmp[,c(rownames(check)[i])]))
total = length((tmp[,c(rownames(check)[i])]))
check[,j] <- round(na / total,digits = 3)
}
check
vars <- matrix(nrow = 195,ncol =1)
rownames(vars) <- colnames(data)
for (i in 1:length(colnames(data))) {
na = sum(is.na(tmp[,c(rownames(check)[i])]))
total = length((tmp[,c(rownames(check)[i])]))
vars[j,1] <- round(na / total,digits = 3)
}
vars
for (i in 1:length(colnames(data))) {
na = sum(is.na(tmp[,c(rownames(vars)[i])]))
total = length((tmp[,c(rownames(vars)[i])]))
vars[j,1] <- round(na / total,digits = 3)
}
vars
for (i in 1:length(colnames(data))) {
na = sum(is.na(data[,c(rownames(vars)[i])]))
total = length((data[,c(rownames(vars)[i])]))
vars[j,1] <- round(na / total,digits = 3)
}
var
vars
input_vars <- c('attr', 'sinc', 'intel', 'fun', 'amb', 'shar', 'like', 'prob','gender')
testing <- data[,c("dec",input_vars)]
testing <- testing[which(complete.cases(testing)),]
## split data into train and test
smp_size <- floor(0.75 * nrow(testing))
set.seed(22)
train_ind <- sample(seq_len(nrow(testing)), size = smp_size)
train <- testing[train_ind, ]
test <- testing[-train_ind, ]
lm.fit <- lm(dec~.,data=train)
step.lm <- step(lm.fit)
summary(step.lm)
testing <- data[,c("dec",input_vars)]
testing <- testing[which(complete.cases(testing)),]
testing <- data[,c("dec",input_vars)]
testing <- testing[which(complete.cases(testing)),]
vars
for (i in 1:length(colnames(data))) {
na = sum(is.na(data[,c(vars[i])]))
total = length((data[,c(vars[i])]))
vars[j,1] <- round(na / total,digits = 3)
}
i = 1
sum(is.na(data[,c(vars[i])]))
vars[i]
na = sum(is.na(data[,c(rownmes(vars[i]))]))
na = sum(is.na(data[,c(rownames(vars[i]))]))
na
names(data)
table(data$match_es)
table(data$match)
table(data$dec)
table(data$gender)
for (i in 1:length(colnames(data))) {
na = sum(is.na(data[,c(rownames(vars[i]))]))
total = length(data[,c(rownames(vars[i]))])
vars[j,1] <- round(na / total,digits = 3)
}
vars
for (i in 1:length(colnames(data))) {
na = sum(is.na(data[,c(rownames(vars[i]))]))
total = length(data[,c(rownames(vars[i]))])
vars[i,1] <- round(na / total,digits = 3)
}
vars
total
i = 22
na = sum(is.na(data[,c(rownames(vars[i]))]))
na
i = 190
na = sum(is.na(data[,c(rownames(vars[i]))]))
na
rownames(vars[i])
vars <- matrix(nrow = 195,ncol =1)
rownames(vars) <- colnames(data)
rownames(vars)
for (i in 1:length(colnames(data))) {
na = sum(is.na(data[,c(rownames(vars[i]))]))
total = length(data[,c(rownames(vars[i]))])
vars[i,1] <- round(na / total,digits = 3)
}
vars
na = sum(is.na(data[,c(rownames(vars)[i])]))
na
for (i in 1:length(colnames(data))) {
na = sum(is.na(data[,c(rownames(vars)[i])]))
total = length(data[,c(rownames(vars)[i])])
vars[i,1] <- round(na / total,digits = 3)
}
vars
hist(vars)
names(vars)
vars[order(vars),]
vars <- vars[order(vars),]
vars
table(vars[which(vars <= .20)])
table(vars <= .20)
use_vars <- vars[which(vars <= .20)]
use_vars
vars <- matrix(nrow = 195,ncol =1)
rownames(vars) <- colnames(data)
for (i in 1:length(colnames(data))) {
na = sum(is.na(data[,c(rownames(vars)[i])]))
total = length(data[,c(rownames(vars)[i])])
vars[i,1] <- round(na / total,digits = 3)
}
use_vars <- vars[which(vars <= .20)]
use_vars
vars <- matrix(nrow = 195,ncol =1)
rownames(vars) <- colnames(data)
vars
for (i in 1:length(colnames(data))) {
na = sum(is.na(data[,c(rownames(vars)[i])]))
total = length(data[,c(rownames(vars)[i])])
vars[i,1] <- round(na / total,digits = 3)
}
vars
use_vars <- vars[which(vars <= .20)]
use_vars
head(use_vars)
vars
table(vars[which(vars <= .20),])
vars <- data.frame(vars)
vars
vars <- vars[which(vars$vars <= .20),]
vars
head(vars)
names(vars)
rownames(vars)
vars
vars <- data.frame(varname = colnames(data),pct_miss = rep(0,length(colnames(data))))
vars
for (i in 1:length(colnames(data))) {
na = sum(is.na(data[,c(vars$varname[i])]))
total = length(data[,c(vars$varname[i])])
vars$pct_miss[i] <- round(na / total,digits = 3)
}
vars
use_vars <- var[which(vars$pct_miss <= 0.20),]
use_vars <- vars[which(vars$pct_miss <= 0.20),]
use_var
use_vars
dim(use_vars)
setwd("/Users/asheets/Documents/Work_Computer/Grad_School/PREDICT_422/GroupProjectEC")
write.csv(use_vars,file="vars_to_use.csv",quote=FALSE,row.names=TRUE)
##Look into which variables are numeric and which are character
nums <- data.frame(sapply(data, is.numeric))
char <- data.frame(sapply(data, is.character))
nums
char
nums$variable <- rownames(nums)
char$variable <- rownames(char)
nums
nums <- nums[which(nums$sapply.data..is.numeric. == TRUE),]
char <- char[which(char$sapply.data..is.character. == TRUE),]
num
nums
char
nums
char
cors <- cor(data[,c(nums$variable)], use="complete.obs", method="pearson")
data2 <- data[,c(use_vars)]
data2 <- data[,c(use_vars$varname)]
names(data2)
dim(data2)
nums <- data.frame(sapply(data2, is.numeric))
char <- data.frame(sapply(data2, is.character))
nums$variable <- rownames(nums)
char$variable <- rownames(char)
nums <- nums[which(nums$sapply.data..is.numeric. == TRUE),]
char <- char[which(char$sapply.data..is.character. == TRUE),]
cors <- cor(data2[,c(nums$variable)], use="complete.obs", method="pearson")
table(complete.cases(data2))
cors <- cor(data2[,c(nums$variable)], use="complete.obs", method="pearson")
complete.cases(data2)
complete.cases(data2[,c(nums$variable)])
cors <- cor(data2[,c(nums$variable)], use="complete.obs", method="pearson")
complete <- data2[which(complete.cases(data2)),]
cors <- cor(complete[,c(nums$variable)], use="complete.obs", method="pearson")
nums$variable
data2 <- data[,c(use_vars$varname)]
##Look into which variables are numeric and which are character
nums <- data.frame(sapply(data2, is.numeric))
char <- data.frame(sapply(data2, is.character))
nums$variable <- rownames(nums)
char$variable <- rownames(char)
nums <- nums[which(nums$sapply.data..is.numeric. == TRUE),]
char <- char[which(char$sapply.data..is.character. == TRUE),]
nums
names9nums
data2 <- data[,c(use_vars$varname)]
##Look into which variables are numeric and which are character
nums <- data.frame(sapply(data2, is.numeric))
char <- data.frame(sapply(data2, is.character))
cha
char
nums
nums$variable <- rownames(nums)
char$variable <- rownames(char)
nums <- nums[which(nums$sapply.data2..is.numeric. == TRUE),]
char <- char[which(char$sapply.data2..is.character. == TRUE),]
nums
char
cors <- cor(complete[,c(nums$variable)], use="complete.obs", method="pearson")
cors
cors <- cor(data2[,c(nums$variable)], use="complete.obs", method="pearson")
cors
M <- cor(data2[sapply(data2, is.numeric)])
M
correlations <- data.frame(cor(data2[sapply(data2, is.numeric)]))
correlations
cors <- data.frame(cor(data2[,c(nums$variable)], use="complete.obs", method="pearson") )
cors
#
significant.correlations <- data.frame(
var1 = character(),
var2 = character(),
corr = numeric())
correlations <- data.frame(cor(data2[,c(nums$variable)], use="complete.obs", method="pearson") )
rm(cor)
rm(cors)
significant.correlations <- data.frame(
var1 = character(),
var2 = character(),
corr = numeric())
for (i in 1:nrow(correlations)){
for (j in 1:ncol(correlations)){
tmp <- data.frame(
var1 = as.character(colnames(correlations)[j]),
var2 = as.character(rownames(correlations)[i]),
corr = correlations[i,j])
#
if (!is.na(correlations[i,j])) {
if (correlations[i,j] > .5 & as.character(tmp$var1) != as.character(tmp$var2)
| correlations[i,j] < -.5 & as.character(tmp$var1) != as.character(tmp$var2) ) {
significant.correlations <- rbind(significant.correlations,tmp) }
}
}
}
significant.correlations <- significant.correlations[order(abs(significant.correlations$corr),decreasing=TRUE),]
significant.correlations <- significant.correlations[which(!duplicated(significant.correlations$corr)),]
significant.correlations
cor(data.all)
cor(data2)
cor(data2[,c(nums$variable)])
corrgram(data2[,c(nums$variable)], order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Correlations")
library(corrplot)
library(corrgram)
corrgram(data2[,c(nums$variable)], order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Correlations")
set.seed(1)
knn.pred=knn(train,test,train$dec,k=1)
table(knn.pred ,test$dec)
library(knn)
?knn
library(class)
knn.pred=knn(train,test,train$dec,k=1)
table(knn.pred ,test$dec)
